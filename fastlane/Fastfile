# Import base_config from git
import_from_git(url: 'https://github.com/rakutentech/ios-buildconfig.git')

default_platform(:ios)

platform :ios do
  desc "Build everything"
  lane :ci do |options|
    tests(options)
    coverage
  end

  desc "Run tests"
  lane :tests do
    build_swift_package # using dedicated xcworkspace
    cocoapods(repo_update: ENV['REM_FL_CP_REPO_UPDATE'] || false)

    scan(
      clean: true,
      skip_build: true,
      output_directory: './artifacts/unit-tests',
      scheme: ENV['REM_FL_TESTS_SCHEME'] || 'Tests',
      device: ENV['REM_FL_TESTS_DEVICE'] || 'iPhone 11',
      workspace: ENV['REM_FL_TESTS_WORKSPACE'],
      code_coverage: true,
      output_types: 'json-compilation-database,html,junit',
      output_files: 'compile_commands.json,report.html,report.junit')

    lint_module
  end

  desc "Generate code coverage"
  lane :coverage do |options|
    slather(
      output_directory: './artifacts/coverage',
      scheme: ENV['REM_FL_TESTS_SCHEME'] || 'Tests',
      sonarqube_xml: true,
      use_bundle_exec: true,
      proj: ENV['REM_FL_TESTS_PROJECT'],
      workspace: ENV['REM_FL_TESTS_WORKSPACE'],
      binary_basename: ENV['REM_FL_TESTS_SLATHER_BASENAME'],
      ignore: '*.{h,m}')
  end

  lane :build_swift_package do
    ios_destination = 'platform=iOS Simulator,name=' + ENV['REM_FL_TESTS_DEVICE'] || 'iPhone 11'
    # The simulator name can differ between Xcode versions
    # Example data: `{ platform:watchOS Simulator, id:9F48180C-4348-45DC-9462-23B243FC596D, OS:9.0, name:Apple Watch Series 6 (40mm) }`
    watchos_sim_id = sh("cd .. && \
      xcodebuild -scheme TestHost -showdestinations 2>/dev/null \
      | grep 'Apple Watch ' \
      | head -n 1 \
      | awk -F 'id:' '{print $2}' \
      | cut -d ',' -f1 \
      | tr -d '\n'")
    watchos_destination = 'platform=watchOS Simulator,id=' + watchos_sim_id

    Build = Struct.new(:scheme, :destination, :xcargs)
    main_build_ios = Build.new('RSDKUtilsMain', ios_destination, '"APPLICATION_EXTENSION_API_ONLY=YES"')
    main_build_watchos = Build.new('RSDKUtilsMain', watchos_destination)
    nimble_build_ios = Build.new('RSDKUtilsNimble', ios_destination)
    helpers_build_ios = Build.new('RSDKUtilsTestHelpers', ios_destination)

    [main_build_ios, main_build_watchos, nimble_build_ios, helpers_build_ios].each do |build|
      xcodebuild(
        clean: true,
        build: true,
        workspace: 'RSDKUtils-Package.xcworkspace',
        scheme: build.scheme,
        destination: build.destination,
        xcargs: build.xcargs
      )
    end
  end

  desc "Archive Sample app"
  lane :archive do
    cocoapods(repo_update: ENV['REM_FL_CP_REPO_UPDATE'] || false)

    config_url = ENV['REVENT_LOGGER_CONFIG_URL'] || 'http://localhost:6789/config'
    api_key = ENV['REVENT_LOGGER_API_KEY']

    xcodebuild(
      archive: true,
      archive_path: "./artifacts/RSDKUtilsSample.xcarchive",
      scheme: ENV['REM_FL_SAMPLE_SCHEME'],
      workspace: ENV['REM_FL_SAMPLE_WORKSPACE'],
      xcargs: "CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ENABLE_BITCODE=NO REvent_Logger_API_Key=#{api_key} REvent_Logger_API_Endpoint=#{config_url}",
    )
  end

  desc "Create and sign ipa from generated xcarchive artifact"
  lane :create_ipa do |options|
    gym(
      skip_build_archive: true,
      export_team_id: options[:export_team_id] || ENV['REM_FL_EXPORT_TEAM_ID'],
      output_directory: "./artifacts",
      include_symbols: true,
      scheme: ENV['REM_FL_SAMPLE_SCHEME'],
      workspace: ENV['REM_FL_SAMPLE_WORKSPACE'],
      output_name: "RSDKUtilsSample.ipa",
      archive_path: "./artifacts/RSDKUtilsSample.xcarchive",
      export_options: {
        method: options[:export_method] || "ad-hoc",
        provisioningProfiles: {
          "jp.co.rakuten.rsdkutils.sample" => options[:provisioning_profile]
        }
      },
    )
  end
end
# vim:syntax=ruby:et:sts=2:sw=2:ts=2:ff=unix:
